function runAnalysis(inputDirectory, outputDirectory)
files = dir([inputDirectory, filesep, '*.evt']);
groupStream = FileStream([outputDirectory, filesep, 'group_behavior.txt']);
groupStream.write(sprintf( ...
    '%s\t%s\t%s\t%s\t%s\t%s\t%s\n', ...
    'Filename', ...
    'All Accuracy (%)', ...
    'In-set Accuracy (%)', ...
    'Out-of-set Accuracy (%)', ...
    'All RT (ms)', ...
    'In-set RT (ms)', ...
    'Out-of-set RT (ms)'));
for i = 1:numel(files)
    filepath = [files(i).folder, filesep, files(i).name];
    try
        events = readBESAevt(filepath);
        recoded = recode(events);
        metrics = trialMetrics(recoded);
        groupStream.write(sprintf(...
            '%s\t%.4f\t%.4f\t%.4f\t%d\t%d\t%d\n',...
            files(i).name,...
            accuracyPercentage(metrics),...
            accuracyPercentage(metrics([metrics.condition] == Condition.InSet)),...
            accuracyPercentage(metrics([metrics.condition] == Condition.OutOfSet)),...
            reactionTimeMilliseconds(metrics), ...
            reactionTimeMilliseconds(metrics([metrics.condition] == Condition.InSet)), ...
            reactionTimeMilliseconds(metrics([metrics.condition] == Condition.OutOfSet))));

        recodedFilename = [outputDirectory, filesep, files(i).name(1:end-4), '_recoded.evt'];
        fid = fopen(recodedFilename, 'wt');
        fprintf(fid, 'Tmu         	Code	TriNo\n');
        fclose(fid);
        dlmwrite(recodedFilename, recoded, 'delimiter', '\t', '-append', 'precision', '%.0f');

        individualStream = FileStream([outputDirectory, filesep, files(i).name(1:end-4), '.txt']);
        individualStream.write(sprintf( ...
            '%s\t%s\t%s\t%s\n', ...
            'Trial', ...
            'Condition', ...
            'Accuracy', ...
            'RT'));
        for j = 1:numel(metrics)
            individualStream.write(sprintf(...
                '%d\t%d\t%d\t%d\n',...
                j,...
                conditionKey(metrics(j).condition), ...
                metrics(j).correct, ...
                round(metrics(j).reactionTimeMilliseconds)));
        end
    catch ME
        warning("Failed to process %s\n", filepath)
        disp(ME)
    end
end
end

function percentage = accuracyPercentage(metrics)
percentage = numel(metrics([metrics.correct])) / numel(metrics) * 100;
end

function milliseconds = reactionTimeMilliseconds(metrics)
milliseconds = round(mean([metrics([metrics.correct]).reactionTimeMilliseconds]));
end

function key = conditionKey(condition)
switch condition
    case Condition.InSet
        key = 1;
    case Condition.OutOfSet
        key = 2;
end
end